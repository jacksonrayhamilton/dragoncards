// Server-side: client is added to a collection.

{
  "toClient": "queryPlayerName"
}

// Client may respond with

{
  "toServer": "setPlayerName",
  "name": "Billy Bo Jo" // or null
}

// Create a Player associated with the client and set its name
// and give it a uuid.

{
  "toClient": "createPlayer",
  "name": "Billy Bo Jo",
  "uuid": "4444"
}

// Server-side move client to the lobby.
// Client-side delegate player to lobby.

{
  "toClient": "movePlayerToLobby",
  "players": [
    {
      "name": "Billy Bo Jo",
      "uuid": "4443" // a uuid
    },
    {}  // another user
  ]
}

// Serverside: On interval, check if the lobby has changed in
// size. If so, broadcast delta to all current players in lobby.

{
  "toClient": "updateLobby",
  "playersJoined": [ { "name": "Jaime Lannister", "uuid": "6666" } ],
  "playersLeft": [ "4443", "4442" ]
}

// Every minute or so send a userList for a full refresh.

// If a game starts, move players to room, record the change
// temporarily in the lobby.

// Users can click on a player they wish to fight. If so the
// following is sent up:

{
  "toServer": "requestDuel",
  "opponent": "6666" // uuid
}

// Server validates that the sender is in a lobby, and that the
// opponent is also in a lobby.
// Server sends the following to the requestee:

{
  "toClient": "duelRequested",
  "duelRequest": {
    "uuid": "PPPP" // UUID of the request.
    "requester": {}, // player
    "requestee": {} // requested player
  }
}

// Server creates a DuelRequest object that can be accessed via
// its UUID. The DuelRequest contains a reference to the
// requester and requestee.
// Requestee may respond with either an accept or a decline.

{
  "toServer": "answerDuelRequest",
  "uuid": "4444", // UUID of the DuelRequest.
  "accept": true // or false
}

// If false, the requester is notified and nothing happens.

{
  "toClient": "duelRequestAnswered",
  "duelRequest": {}, // DuelRequest
  "accept": false
}

// If true, the game begins.
// Server-side both players are moved from the lobby
// into a new room. A Game is also instantiated.
// The following is sent to each client:

{
  "toClient": "movePlayerToRoom",
  "room": {
    "id": "XXXX"
  },
  "game": {
    "players": [] // players. order matters.
    "turnPlayer": "6666", // randomly-chosen
    "deck": {
      "size": 63
    },
    "yourHand": {
      "size": 6,
      "cards": [
        {
          "attribute": "water",
          "level": 4
        },
        {
          "attribute": "fire",
          "level": 3
        },
        {} // and many more cards
      ]
    },
    "opponentHand": {
      "size": 6,
      "cards": null
    },
    "yourDiscardPile": [],
    "opponentDiscardPile": [],
    "yourDragons": [],
    "opponentDragons": []
  }
}

// Room goes in loop, alternating turns:

// To client whose turn it is:

{
  "toClient": "queryPreliminaryAction"
}

{
  "toServer": "preliminaryAction",
  "action": "pilfer" // or simply just "draw", or "summon" if possible
  "target": "opponent" // or "self", to determine which discard pile to pilfer
}

// Which the server relays to the other client.

{
  "toClient": "opponentPilfer", // or opponentDraw
  "target": "self" // or "opponent"
}

// Deliver drawn cards to the player drawing.

{
  "toClient": "draw",
  "card": {
    "element": "water",
    "level": 4
  }
}

// Or if pilfering, you DON'T need to send a message, the client
// already knows what to get.

// <NOT NEEDED>
{
  "toClient": "pilfer",
  "card": {
    "element": "fire",
    "level": 2
  }
}
// </NOT NEEDED>

// After drawing or pilfering, the turn player must discard a card in order to
// return to 6 cards in hand.
{
  "toClient": "queryDiscardAction"
}

// The player responds with the type of card he wishes to discard. Check that he
// has such a card.
{
  "toServer": "discardAction",
  "element": "fire",
  "level": 1
}

// Relay the discarded card to the opponent.
{
  "toClient": "opponentDiscard"
  "card": {}
}

// Or if summoning, the server checks that the player can summon,
// and then relays to the opponent what was summoned.

{
  "toClient": "opponentSummon",
  "dragons": []
}

// Once that player has summoned the server will draw unlimited
// cards until the losing player has his sets made. If the deck
// runs out first then he loses. Immediately after he gets his sets,
// then that player summons too. Same message as above is sent.
// Then, enter battle state.

// Battle is not turns-based. It is instantaneous and based on
// predictions. However switches and counters come before attacks.

{
  "toClient": "queryBattleActions"
}

{
  "toServer": "battleActions",
  "actions": [
    {
      "type": "attack",
      "player": 0, // FISHY: Gotta check this. Shouldn't be user-set.
      "initiator": 0 // or 1.
      "target": 0 // or 1.
    },
    {} // Another action.
  ]
}

// The clients wait while their attacks pend.
// Once the server receives both, it determines the current state,
// relays the opponent action and also if the game is over.

{
  "toClient": "opponentBattleActions",
  "actions": []
}

// The client can infer the state of the game based on what happened. To make things a little easier a gameover message will be sent.

{
  "toClient": "gameover",
  "winner": {}, // player
  "draw": true // if there was a draw
}

// Once the battle is over a victory message will be shown clientside.
// Server-side the player is still in the room until an exit is sent.

{
  "toServer": "exitRoom"
}

// Once this message is received the server will send the user back to
// to the lobby with a new list of players.

{
  "toClient": "opponentDisconnect"
}


// This one is just a little bonus for the client.
// This is what an outcome object looks like:
// DEPRECATED because the gains of implementing this are far too small
// to justify it.

{
  "your": {
    "dragon0": {
      "dragon": {} // this dragon
      "type": "attacked",
      "result": {
        "hit": true,
        "countered": false,
        "hitWhom": {} // dragon who got hit
      }
    },
    "dragon1": {
      "type": "countered",
      "result": {
        "counteredHit": false,
        "counteredWhom": {} // dragon whose attack was countered
      }
    }
  },
  "opponent": {
    "dragon0": {
      "type": "swap",
      "result": {
        "swappedTo": 0 // or 1, whichever index
      }
    },
    "dragon1": {}
  }
}